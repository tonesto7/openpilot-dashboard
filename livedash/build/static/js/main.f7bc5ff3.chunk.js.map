{"version":3,"sources":["Graphs/ScatterPlot.js","helpers/available_signals.js","Graphs/AddLines.js","Graphs/AddGraph.js","Graphs/GraphSettings.js","Graphs/GraphDashboard.js","Joystick/JoystickSettings.js","Joystick/Joystick.js","opEdit/OPEdit.js","TabPanel.js","helpers/WebSocketHelper.js","MainSettings.js","theme/theme.js","App.js","index.js"],"names":["Plot","createPlotlyComponent","Plotly","ScatterPlot","Component","constructor","props","super","layout","this","state","data","Object","values","lines","colorway","titlefont","family","size","color","xaxis","autorange","gridcolor","yaxis","tickangle","type","showlegend","legend","x","y","orientation","font","plot_bgcolor","paper_bgcolor","width","height","margin","l","r","b","t","pad","datarevision","frames","config","displayModeBar","displaylogo","revision","responsiveChartRef","React","createRef","componentDidMount","el_width","current","getBoundingClientRect","el_height","setState","resizeListener","window","addEventListener","componentWillUnmount","removeEventListener","render","_jsx","ref","id","event","title","style","children","onUpdate","figure","available_signals","thermal","freeSpacePercent","batteryPercent","fanSpeedPercentDesired","started","usbOnline","startedMonoTime","thermalStatus","batteryCurrent","batteryVoltage","chargingError","chargingDisabled","memoryUsagePercent","cpuUsagePercent","networkType","offroadPowerUsage","networkStrength","carBatteryCapacity","cpu","gpu","mem","bat","ambient","controlsState","vPid","vTargetLead","upAccelCmd","uiAccelCmd","cumLagMs","enabled","vCruise","longitudinalPlanMonoTime","angleSteersDes","longControlState","ufAccelCmd","aTarget","active","curvature","alertStatus","alertSize","engageable","alertBlinkingRate","startMonoTime","lateralPlanMonoTime","forceDecel","alertSound","canErrorCounter","health","voltage","ignitionLine","controlsAllowed","gasInterceptorDetected","hasGps","canSendErrs","canFwdErrs","gmlanSendErrs","pandaType","fanSpeedRpm","usbPowerMode","ignitionCan","safetyModel","faultStatus","powerSaveEnabled","uptime","canRxErrs","radarState","mdMonoTime","canMonoTimes","controlsStateMonoTime","radarErrors","liveCalibration","calStatus","calCycle","calPerc","extrinsicMatrix","rpyCalib","rpyCalibSpread","validBlocks","carState","vEgo","gas","gasPressed","brake","brakePressed","steeringAngle","steeringTorque","steeringPressed","gearShifter","steeringRate","aEgo","vEgoRaw","standstill","brakeLights","leftBlinker","rightBlinker","yawRate","genericToggle","doorOpen","seatbeltUnlatched","canValid","steeringTorqueEps","clutchPressed","steeringRateLimited","stockAeb","stockFcw","espDisabled","leftBlindspot","rightBlindspot","steerWarning","steerError","carControl","longitudinalPlan","vTarget","hasLead","fcw","radarStateMonoTime","vTargetFuture","longitudinalPlanSource","aCruise","vMax","vStart","aStart","processingDelay","driverState","frameId","faceOrientation","facePosition","faceProb","leftEyeProb","rightEyeProb","leftBlinkProb","rightBlinkProb","faceOrientationStd","facePositionStd","sunglassesProb","modelExecutionTime","dspExecutionTime","poorVision","partialFace","distractedPose","distractedEyes","liveParameters","valid","gyroBias","angleOffset","angleOffsetAverage","stiffnessFactor","steerRatio","sensorValid","posenetSpeed","posenetValid","cameraOdometry","trans","rot","transStd","rotStd","timestampEof","lateralPlan","laneWidth","lProb","rProb","angleSteers","mpcSolutionValid","rateSteers","desire","laneChangeState","laneChangeDirection","dPathPoints","dProb","carParams","carName","carFingerprint","enableGasInterceptor","enableCruise","enableCamera","enableDsu","enableApgs","minEnableSpeed","minSteerSpeed","safetyParam","steerMaxBP","steerMaxV","gasMaxBP","gasMaxV","brakeMaxBP","brakeMaxV","mass","wheelbase","centerToFront","steerRatioRear","rotationalInertia","tireStiffnessFront","tireStiffnessRear","steerLimitAlert","vEgoStopping","directAccelControl","stoppingControl","startAccel","steerRateCost","steerControlType","radarOffCan","steerActuatorDelay","openpilotLongitudinalControl","carVin","isPandaBlack","dashcamOnly","safetyModelPassive","transmissionType","radarTimeStep","communityFeature","steerLimitTimer","fingerprintSource","networkLocation","minSpeedCan","stoppingBrakeRate","startingBrakeRate","driverMonitoringState","faceDetected","isDistracted","awarenessStatus","posePitchOffset","posePitchValidCount","poseYawOffset","poseYawValidCount","stepChange","awarenessActive","awarenessPassive","isLowStd","hiStdCount","isActiveMode","frontFrame","encodeId","frameLength","integLines","globalGain","frameType","timestampSof","lensPos","lensSag","lensErr","lensTruePos","gainFrac","recoverState","testJoystick","axes","buttons","axesMode","AddLines","selected","renderButtons","result","entries","forEach","_ref","key","value","filtered_array","_ref2","v_key","v_value","push","ToggleButton","textTransform","borderRadius","minWidth","maxHeight","_jsxs","Accordion","AccordionSummary","expandIcon","ExpandMoreIcon","Typography","variant","AccordionDetails","justifyContent","ToggleButtonGroup","onChange","signals","render_revision","shouldComponentUpdate","nextProps","nextState","show","prev_selection","Dialog","open","DialogContent","DialogActions","Button","onClick","setLogParams","AddGraph","plotname","lines_available","map","DialogTitle","Grid","container","spacing","direction","alignItems","item","FormControl","InputLabel","htmlFor","Input","target","inputProps","FormHelperText","addplot","GraphSettings","cols","rateHz","max_datapoints","webgl","Math","min","max","parseInt","endAdornment","InputAdornment","position","FormControlLabel","control","Switch","checked","name","label","setSettings","line_def_tpl","mode","connectgaps","plot_def_tpl","lines_attach","GraphDashboard","_this","actions","icon","LinearScaleIcon","handler","show_addlines","EqualizerIcon","show_addgraph","SettingsIcon","show_settings","DeleteForeverIcon","plots","ws_status","data_counter","renderDelay","clearInterval","render_delay","setInterval","messageProcess","msg_recv","keys","key_name","name_y","axis_x","round","axis_y","startsWith","path","slice","_","get","line_name","Array","isArray","y_value","index","addUpdateLines","values_limit","arguments","length","undefined","line_tpl","JSON","parse","stringify","shift","addUpdatePlots","plot_name","random","toString","substring","plot_tpl","renderReadyPlots","datarevision_sum","xs","md","layout_cols","speeddial","wshelper","prevProps","prevState","classes","Fragment","justify","rate","datapoints","SpeedDial","ariaLabel","className","speedDial","SpeedDialIcon","FabProps","action","SpeedDialAction","tooltipTitle","tooltipOpen","withStyles","theme","bottom","right","mainDiv","flexGrow","JoystickSettings","joy_finetune","new_state","cloneDeep","align","axes_scale","textAlign","fullWidth","axes_deadzone","Select","displayEmpty","MenuItem","restJoystick_0","restJoystick_1","Joystick","joystick_msg","last_timestamp","data_revision","renderJoystick_0","renderJoystick_1","procData","resetMessage","realGamepad","gamepads","navigator","getGamepads","gamepad","timestamp","axis","deadzone","parseFloat","scale_neg","scale_pos","button","virtualJoystick","joy_index","size_scale","instance","options","lockX","lockY","checkJoy","joystick","toFixed","ReactNipple","top","left","dynamicPage","restJoystick","threshold","outline","onMove","evt","onEnd","SyncDisabledIcon","SyncIcon","OPEdit","op_data","opEdit","renderParams","render_obj","sm","split","padding","Fab","loadFab","loadRequest","ArrowDownwardIcon","extendedIcon","saveFab","ArrowUpwardIcon","marginRight","TabPanel","role","hidden","concat","WebSocketHelper","timeout","connect","ws","WebSocket","ws_url","status","that","connectInterval","onopen","clearTimeout","onclose","e","console","log","reason","setTimeout","checkSocketConnection","onerror","err","error","message","close","onmessage","publishers","updatePublishersAndSignals","sendMessage","msg","readyState","CLOSED","send","keep_alive","keepAlive","MainSettings","dark_theme","light_theme","createMuiTheme","palette","typography","overrides","MuiFormLabel","root","App","sent_count","received_count","show_error","last_error_msg","pushopedit","pushgraphdata","sendWSmsg","connectionStatus","_Fragment","Box","iconSpaced","Badge","anchorOrigin","vertical","horizontal","badgeContent","showZero","SignalWifi4BarIcon","SignalWifi0BarIcon","SignalWifiOffIcon","a11yProps","setTheme","set_dark_theme","location","hostname","selectedTab","show_mainsettings","ThemeProvider","CssBaseline","AppBar","Toolbar","Tabs","mainTabs","newValue","indicatorColor","textColor","scrollButtons","Tab","disabled","IconButton","component","Snackbar","autoHideDuration","onClose","MuiAlert","elevation","severity","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7bc5ff3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport propTypes from \"prop-types\";\n\nimport Plotly from \"plotly.js-gl2d-dist-min\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\n\nconst Plot = createPlotlyComponent(Plotly);\n\nexport class ScatterPlot extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: Object.values(this.props.lines),\n            layout: {\n                colorway: [\"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#e377c2\", \"#bcbd22\", \"#17becf\", \"#1f77b4\"],\n                titlefont: {\n                    family: \"Arial, sans-serif\",\n                    size: 24,\n                    color: \"rgba(119,119,119,1)\",\n                },\n                xaxis: {\n                    autorange: true,\n                    gridcolor: \"rgba(119,119,119,0.2)\",\n                    color: \"rgba(119,119,119,1)\",\n                    //color: \"#FF4500\",\n                    //rangeslider: {} // Degrades performance slightly, for scattergl only as a scroll (not showing contents)\n                },\n                yaxis: {\n                    autorange: true,\n                    color: \"rgba(119,119,119,1)\",\n                    //color: \"#FF4500\",\n                    gridcolor: \"rgba(119,119,119,0.2)\",\n                    tickangle: \"auto\",\n                    type: \"linear\",\n                },\n                showlegend: true,\n                legend: {\n                    x: 0,\n                    y: 1.06,\n                    orientation: \"h\",\n                    font: {\n                        color: \"rgba(119,119,119,1)\",\n                    },\n                },\n                plot_bgcolor: \"rgba(0,0,0,0)\",\n                paper_bgcolor: \"rgba(0,0,0,0)\",\n                width: 700,\n                height: 450,\n                margin: {\n                    l: 50,\n                    r: 5,\n                    b: 30,\n                    t: 50,\n                    pad: 4,\n                },\n                datarevision: 0,\n            },\n            frames: [],\n            config: {\n                displayModeBar: true,\n                displaylogo: false,\n            },\n            revision: 0,\n        };\n        this.responsiveChartRef = React.createRef();\n    }\n\n    layout = {};\n\n    componentDidMount() {\n        const el_width = this.responsiveChartRef.current.getBoundingClientRect().width - 5;\n        const el_height = this.responsiveChartRef.current.getBoundingClientRect().height;\n        if (el_width !== this.state.layout.width) {\n            this.setState({ layout: { ...this.state.layout, width: el_width, height: el_height } });\n        }\n\n        this.resizeListener = window.addEventListener(\"resize\", () => {\n            if (this.responsiveChartRef.current) {\n                const el_width = this.responsiveChartRef.current.getBoundingClientRect().width - 5;\n                const el_height = this.responsiveChartRef.current.getBoundingClientRect().height;\n                if (el_width !== this.state.layout.width) {\n                    this.setState({ layout: { ...this.state.layout, width: el_width, height: el_height } });\n                }\n            }\n        });\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.resizeListener);\n    }\n\n    render() {\n        //console.log(\"Rendering ScatterPlot: \" + this.props.event.layout.title);\n        //console.log(\"Revision: \" + this.props.event.revision + \" datarevision: \" + this.props.event.layout.datarevision)\n        return (\n            <div ref={this.responsiveChartRef} id={this.props.event.layout.title} style={{ height: \"46vh\" }}>\n                <Plot\n                    data={this.state.data}\n                    layout={{ ...this.layout, ...this.state.layout, ...this.props.event.layout }}\n                    revision={this.props.event.revision}\n                    frames={[...this.state.frames, ...this.props.event.frames]}\n                    config={{ ...this.state.config, ...this.props.event.config }}\n                    //onInitialized={figure => this.setState(figure)}\n                    onUpdate={(figure) => (this.layout = figure.layout)}\n                />\n            </div>\n        );\n    }\n}\n\nScatterPlot.propTypes = {\n    lines: propTypes.object.isRequired,\n    event: propTypes.object.isRequired,\n};\n","export const available_signals = {\n    thermal: {\n        freeSpacePercent: 0.2097935676574707,\n        batteryPercent: 100,\n        fanSpeedPercentDesired: 10,\n        started: false,\n        usbOnline: false,\n        startedMonoTime: 0,\n        thermalStatus: \"green\",\n        batteryCurrent: 594631,\n        batteryVoltage: 4237493,\n        chargingError: false,\n        chargingDisabled: false,\n        memoryUsagePercent: 35,\n        cpuUsagePercent: 20,\n        networkType: \"wifi\",\n        offroadPowerUsage: 25131,\n        networkStrength: \"good\",\n        carBatteryCapacity: 29755978,\n        cpu: [45.400001525878906, 44.79999923706055, 43.5, 43.79999923706055],\n        gpu: [41.900001525878906],\n        mem: 44.5,\n        bat: 0,\n        ambient: 36,\n    },\n    controlsState: {\n        vPid: 0,\n        vTargetLead: 0,\n        upAccelCmd: 0,\n        uiAccelCmd: 0,\n        cumLagMs: 0,\n        enabled: false,\n        vCruise: 0,\n        longitudinalPlanMonoTime: 0,\n        angleSteersDes: 0,\n        longControlState: \"off\",\n        state: \"disabled\",\n        ufAccelCmd: 0,\n        aTarget: 0,\n        active: false,\n        curvature: 0,\n        alertStatus: \"normal\",\n        alertSize: \"none\",\n        engageable: false,\n        alertBlinkingRate: 0,\n        startMonoTime: 0,\n        lateralPlanMonoTime: 0,\n        forceDecel: false,\n        \":lateralControlState.indiState.active\": false,\n        \":lateralControlState.indiState.steerAngle\": 94.94609832763672,\n        \":lateralControlState.indiState.steerRate\": -3.0533325976085657e-13,\n        \":lateralControlState.indiState.steerAccel\": -2.4426660780868525e-12,\n        \":lateralControlState.indiState.rateSetPoint\": 0,\n        \":lateralControlState.indiState.accelSetPoint\": 0,\n        \":lateralControlState.indiState.accelError\": 0,\n        \":lateralControlState.indiState.delayedOutput\": 0,\n        \":lateralControlState.indiState.delta\": 0,\n        \":lateralControlState.indiState.output\": 0,\n        \":lateralControlState.indiState.saturated\": false,\n        alertSound: \"none\",\n        canErrorCounter: 0,\n    },\n    health: {\n        voltage: 12087,\n        current: 0,\n        ignitionLine: false,\n        controlsAllowed: false,\n        gasInterceptorDetected: false,\n        hasGps: true,\n        canSendErrs: 2663915,\n        canFwdErrs: 0,\n        gmlanSendErrs: 0,\n        pandaType: \"uno\",\n        fanSpeedRpm: 375,\n        usbPowerMode: \"cdp\",\n        ignitionCan: false,\n        safetyModel: \"noOutput\",\n        faultStatus: \"none\",\n        powerSaveEnabled: true,\n        uptime: 2419218,\n        canRxErrs: 0,\n    },\n    radarState: {\n        \":leadOne.dRel\": 0,\n        \":leadOne.yRel\": 0,\n        \":leadOne.vRel\": 0,\n        \":leadOne.aRel\": 0,\n        \":leadOne.vLead\": 0,\n        \":leadOne.dPath\": 0,\n        \":leadOne.vLat\": 0,\n        \":leadOne.vLeadK\": 0,\n        \":leadOne.aLeadK\": 0,\n        \":leadOne.fcw\": false,\n        \":leadOne.status\": false,\n        \":leadOne.aLeadTau\": 0,\n        \":leadOne.modelProb\": 0,\n        \":leadOne.radar\": false,\n        \":leadTwo.dRel\": 0,\n        \":leadTwo.yRel\": 0,\n        \":leadTwo.vRel\": 0,\n        \":leadTwo.aRel\": 0,\n        \":leadTwo.vLead\": 0,\n        \":leadTwo.dPath\": 0,\n        \":leadTwo.vLat\": 0,\n        \":leadTwo.vLeadK\": 0,\n        \":leadTwo.aLeadK\": 0,\n        \":leadTwo.fcw\": false,\n        \":leadTwo.status\": false,\n        \":leadTwo.aLeadTau\": 0,\n        \":leadTwo.modelProb\": 0,\n        \":leadTwo.radar\": false,\n        cumLagMs: -40.058692932128906,\n        mdMonoTime: 14472189831128,\n        canMonoTimes: [],\n        controlsStateMonoTime: 14472189113524,\n        radarErrors: [],\n    },\n    liveCalibration: {\n        calStatus: 1,\n        calCycle: 0,\n        calPerc: 100,\n        extrinsicMatrix: [0.019966470077633858, -0.9998006224632263, 0.00019015562429558486, 0, 0.009523315355181694, -1.3552527156068805e-20, -0.9999546408653259, 1.2200000286102295, 0.999755322933197, 0.019967375323176384, 0.009521417319774628, 0],\n        rpyCalib: [-0.000023826511096558534, -0.00952345971018076, 0.019968701526522636],\n        rpyCalibSpread: [0, 0, 0],\n        validBlocks: 50,\n    },\n    carState: {\n        vEgo: 0,\n        \":wheelSpeeds.fl\": 0,\n        \":wheelSpeeds.fr\": 0,\n        \":wheelSpeeds.rl\": 0,\n        \":wheelSpeeds.rr\": 0,\n        gas: 0,\n        gasPressed: false,\n        brake: 0,\n        brakePressed: false,\n        steeringAngle: 94.94609832763672,\n        steeringTorque: -4,\n        steeringPressed: false,\n        \":cruiseState.enabled\": false,\n        \":cruiseState.speed\": 0,\n        \":cruiseState.available\": false,\n        \":cruiseState.speedOffset\": 0,\n        \":cruiseState.standstill\": false,\n        \":cruiseState.nonAdaptive\": false,\n        gearShifter: \"park\",\n        steeringRate: 0,\n        aEgo: 0,\n        vEgoRaw: 0,\n        standstill: true,\n        brakeLights: false,\n        leftBlinker: false,\n        rightBlinker: false,\n        yawRate: 0,\n        genericToggle: false,\n        doorOpen: false,\n        seatbeltUnlatched: false,\n        canValid: false,\n        steeringTorqueEps: -42.5,\n        clutchPressed: false,\n        steeringRateLimited: false,\n        stockAeb: false,\n        stockFcw: false,\n        espDisabled: false,\n        leftBlindspot: false,\n        rightBlindspot: false,\n        steerWarning: false,\n        steerError: false,\n    },\n    carControl: {\n        enabled: false,\n        \":cruiseControl.cancel\": false,\n        \":cruiseControl.override\": true,\n        \":cruiseControl.speedOverride\": 0.30000001192092896,\n        \":cruiseControl.accelOverride\": 1,\n        \":hudControl.speedVisible\": false,\n        \":hudControl.setSpeed\": 70.83333587646484,\n        \":hudControl.lanesVisible\": false,\n        \":hudControl.leadVisible\": false,\n        \":hudControl.visualAlert\": \"none\",\n        \":hudControl.audibleAlert\": \"none\",\n        \":hudControl.rightLaneVisible\": false,\n        \":hudControl.leftLaneVisible\": false,\n        \":hudControl.rightLaneDepart\": false,\n        \":hudControl.leftLaneDepart\": false,\n        \":actuators.gas\": 0,\n        \":actuators.brake\": 0,\n        \":actuators.steer\": 0,\n        \":actuators.steerAngle\": 0,\n        active: false,\n    },\n    longitudinalPlan: {\n        vTarget: 0,\n        hasLead: true,\n        fcw: false,\n        mdMonoTime: 123295710706333,\n        radarStateMonoTime: 123295747127478,\n        vTargetFuture: 7.642090019328552e-31,\n        longitudinalPlanSource: \"mpc1\",\n        vCruise: 0,\n        aCruise: 0,\n        aTarget: 0,\n        vMax: 0,\n        vStart: 0,\n        aStart: 0,\n        processingDelay: 0.0022163549438118935,\n    },\n    driverState: {\n        frameId: 210,\n        faceOrientation: [-0.19331105053424835, 0.42528432607650757, 0.19331105053424835],\n        facePosition: [0.2706354856491089, 0.19331105053424835],\n        faceProb: 1.005217432975769,\n        leftEyeProb: 1.005217432975769,\n        rightEyeProb: 1.005217432975769,\n        leftBlinkProb: 0.03866221010684967,\n        rightBlinkProb: 0.03866221010684967,\n        faceOrientationStd: [0.05159972980618477, 0.04607699066400528, 0.03534235060214996],\n        facePositionStd: [0.011215822771191597, 0.005191889591515064],\n        sunglassesProb: 0.03866221010684967,\n        modelExecutionTime: 0.01499489601701498,\n        dspExecutionTime: 0.012737344019114971,\n        poorVision: 0.46394652128219604,\n        partialFace: 0.07732442021369934,\n        distractedPose: 0.03866221010684967,\n        distractedEyes: 0.03866221010684967,\n    },\n    liveParameters: {\n        valid: true,\n        gyroBias: 0,\n        angleOffset: 0.4804331064224243,\n        angleOffsetAverage: 0.4804331064224243,\n        stiffnessFactor: 1,\n        steerRatio: 16.623638153076172,\n        sensorValid: true,\n        yawRate: 0,\n        posenetSpeed: 0,\n        posenetValid: true,\n    },\n    cameraOdometry: {\n        trans: [0.0141754150390625, -0.00048542022705078125, 0.002925872802734375],\n        rot: [0, 0, 0],\n        transStd: [0.023609790951013565, 0.015066033229231834, 0.0341513529419899],\n        rotStd: [0.0007046477403491735, 0.0006267267162911594, 0.0007678816327825189],\n        frameId: 343,\n        timestampEof: 14476174423000,\n    },\n    lateralPlan: {\n        laneWidth: 2.799999952316284,\n        lProb: 0.15726622939109802,\n        rProb: 0.17652960121631622,\n        angleSteers: -23.378400802612305,\n        mpcSolutionValid: true,\n        angleOffset: 0.4804331064224243,\n        rateSteers: 0,\n        desire: \"none\",\n        laneChangeState: \"off\",\n        laneChangeDirection: \"none\",\n        dPathPoints: [\n            -0.005084991455078125, -0.005084991455078125, -0.005084991455078125, -0.005084991455078125, -0.005084991455078125, -0.005084991455078125, -0.005084991455078125, -0.005084991455078125, -0.005084991455078125, -0.005084991455078125, -0.005084991455078125, -0.005084991455078125, -0.005084991455078125, -0.005084991455078125,\n            -0.005084991455078125, -0.005084991455078125, -0.005084991455078125,\n        ],\n        dProb: 0,\n    },\n    carParams: {\n        carName: \"toyota\",\n        carFingerprint: \"TOYOTA COROLLA TSS2 2019\",\n        enableGasInterceptor: false,\n        enableCruise: true,\n        enableCamera: true,\n        enableDsu: false,\n        enableApgs: false,\n        minEnableSpeed: -1,\n        minSteerSpeed: 0,\n        safetyModel: \"toyota\",\n        safetyParam: 50,\n        steerMaxBP: [0],\n        steerMaxV: [1],\n        gasMaxBP: [0],\n        gasMaxV: [0.5],\n        brakeMaxBP: [0],\n        brakeMaxV: [1],\n        mass: 1523.9915771484375,\n        wheelbase: 2.6700000762939453,\n        centerToFront: 1.1748000383377075,\n        steerRatio: 15.329999923706055,\n        steerRatioRear: 0,\n        rotationalInertia: 2548.41552734375,\n        tireStiffnessFront: 186196.578125,\n        tireStiffnessRear: 231266.25,\n        \":longitudinalTuning.kpBP\": [0, 5, 20],\n        \":longitudinalTuning.kpV\": [1.2999999523162842, 1, 0.699999988079071],\n        \":longitudinalTuning.kiBP\": [0, 5, 12, 20, 27],\n        \":longitudinalTuning.kiV\": [0.3499999940395355, 0.23000000417232513, 0.20000000298023224, 0.17000000178813934, 0.10000000149011612],\n        \":longitudinalTuning.deadzoneBP\": [0, 8.050000190734863],\n        \":longitudinalTuning.deadzoneV\": [0, 0.14000000059604645],\n        \":lateralTuning.indi.outerLoopGainBP\": [18, 22, 26],\n        \":lateralTuning.indi.outerLoopGainV\": [8, 11, 14.899999618530273],\n        \":lateralTuning.indi.innerLoopGainBP\": [18, 22, 26],\n        \":lateralTuning.indi.innerLoopGainV\": [9, 12, 15],\n        \":lateralTuning.indi.timeConstantBP\": [18, 22, 26],\n        \":lateralTuning.indi.timeConstantV\": [1, 3, 4.5],\n        \":lateralTuning.indi.actuatorEffectivenessBP\": [18, 22, 26],\n        \":lateralTuning.indi.actuatorEffectivenessV\": [9, 12, 15],\n        steerLimitAlert: false,\n        vEgoStopping: 0,\n        directAccelControl: false,\n        stoppingControl: false,\n        startAccel: 1.2000000476837158,\n        steerRateCost: 0.5,\n        steerControlType: \"torque\",\n        radarOffCan: false,\n        steerActuatorDelay: 0.44999998807907104,\n        openpilotLongitudinalControl: true,\n        carVin: \"JTDS4MCE2MJ056503\",\n        isPandaBlack: true,\n        dashcamOnly: false,\n        safetyModelPassive: \"silent\",\n        transmissionType: \"unknown\",\n        // \"carFw\": [\n        //   {\n        //     \"ecu\": \"esp\",\n        //     \"fwVersion\": \"\\u0001F152612B90\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\",\n        //     \"address\": 1968,\n        //     \"subAddress\": 0\n        //   },\n        //   {\n        //     \"ecu\": \"engine\",\n        //     \"fwVersion\": \"\\u00018966312M9000\\u0000\\u0000\\u0000\\u0000\",\n        //     \"address\": 1792,\n        //     \"subAddress\": 0\n        //   },\n        //   {\n        //     \"ecu\": \"eps\",\n        //     \"fwVersion\": \"\\u00018965B12350\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\",\n        //     \"address\": 1953,\n        //     \"subAddress\": 0\n        //   },\n        //   {\n        //     \"ecu\": \"fwdRadar\",\n        //     \"fwVersion\": \"\\u00018821F3301400\\u0000\\u0000\\u0000\\u0000\",\n        //     \"address\": 1872,\n        //     \"subAddress\": 15\n        //   },\n        //   {\n        //     \"ecu\": \"fwdCamera\",\n        //     \"fwVersion\": \"\\u00028646F1201300\\u0000\\u0000\\u0000\\u00008646G2601400\\u0000\\u0000\\u0000\\u0000\",\n        //     \"address\": 1872,\n        //     \"subAddress\": 109\n        //   }\n        // ],\n        radarTimeStep: 0.05000000074505806,\n        communityFeature: false,\n        steerLimitTimer: 0.4000000059604645,\n        fingerprintSource: \"can\",\n        networkLocation: \"fwdCamera\",\n        minSpeedCan: 0.30000001192092896,\n        stoppingBrakeRate: 0.10000000149011612,\n        startingBrakeRate: 2,\n    },\n    driverMonitoringState: {\n        faceDetected: true,\n        isDistracted: false,\n        awarenessStatus: 1,\n        posePitchOffset: 0,\n        posePitchValidCount: 0,\n        poseYawOffset: 0,\n        poseYawValidCount: 0,\n        stepChange: 0.00909090880304575,\n        awarenessActive: 1,\n        awarenessPassive: 1,\n        isLowStd: true,\n        hiStdCount: 0,\n        isActiveMode: true,\n    },\n    frontFrame: {\n        frameId: 235,\n        encodeId: 0,\n        timestampEof: 123298601953000,\n        frameLength: 4494,\n        integLines: 4483,\n        globalGain: 175,\n        frameType: \"front\",\n        timestampSof: 0,\n        lensPos: 0,\n        lensSag: 0,\n        lensErr: 0,\n        lensTruePos: 0,\n        gainFrac: 0.2196885049343109,\n        recoverState: 0,\n    },\n    testJoystick: {\n        axes: [],\n        buttons: [],\n        enabled: false,\n        axesMode: [],\n    },\n};\n","import React, { Component } from \"react\";\nimport propTypes from \"prop-types\";\n\nimport { available_signals } from \"../helpers/available_signals\";\n\nimport { Button, Dialog, DialogActions, DialogContent, Typography, Accordion, AccordionSummary, AccordionDetails } from \"@material-ui/core\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nexport class AddLines extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            render_revision: 0,\n        };\n    }\n\n    selected = {};\n\n    shouldComponentUpdate(nextProps, nextState) {\n        // Limits re-renders\n        return nextProps.show !== this.props.show || nextState.render_revision !== this.state.render_revision;\n    }\n\n    renderButtons = () => {\n        const result = [];\n        Object.entries(available_signals).forEach(([key, value]) => {\n            if (typeof value === \"object\") {\n                const filtered_array = [];\n                Object.entries(value).forEach(([v_key, v_value]) => {\n                    if (v_value !== \"DEBUG\" && v_key !== \"logMonoTime\") {\n                        // if ((typeof v_value === 'boolean' || typeof v_value === 'number') && v_key !== 'logMonoTime')\n                        filtered_array.push(\n                            <ToggleButton style={{ textTransform: \"none\", borderRadius: \"0\", minWidth: \"40ch\", maxHeight: \"20px\" }} value={v_key} key={v_key} aria-label={v_key}>\n                                {v_key}\n                            </ToggleButton>,\n                        );\n                    }\n                });\n                result.push(\n                    <Accordion key={key}>\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\">\n                            <Typography variant=\"body1\">{key}</Typography>\n                        </AccordionSummary>\n                        <AccordionDetails style={{ justifyContent: \"center\" }}>\n                            <ToggleButtonGroup\n                                orientation=\"vertical\"\n                                value={this.selected[key]}\n                                onChange={(event, signals) => {\n                                    this.selected[key] = signals;\n                                    this.setState({ render_revision: this.state.render_revision + 1 });\n                                }}\n                                aria-label=\"lines selected\"\n                            >\n                                {filtered_array}\n                            </ToggleButtonGroup>\n                        </AccordionDetails>\n                    </Accordion>,\n                );\n            }\n        });\n        return result;\n    };\n\n    render() {\n        //console.log(\"Rendering AddLines\");\n        this.selected = this.props.prev_selection;\n        return (\n            <Dialog open={this.props.show} aria-labelledby=\"form-dialog-title\">\n                <DialogContent>{this.renderButtons()}</DialogContent>\n                <DialogActions>\n                    <Button onClick={() => this.props.setLogParams(this.selected)} color=\"default\">\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nAddLines.propTypes = {\n    show: propTypes.bool.isRequired,\n    prev_selection: propTypes.object.isRequired,\n    setLogParams: propTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\nimport propTypes from \"prop-types\";\n\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, Input, InputLabel, FormHelperText, Grid } from \"@material-ui/core\";\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\n\nexport class AddGraph extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            render_revision: 0,\n        };\n    }\n\n    plotname = \"\";\n    lines = [];\n\n    shouldComponentUpdate(nextProps, nextState) {\n        // Limits re-renders\n        return nextProps.show !== this.props.show || nextState.render_revision !== this.state.render_revision;\n    }\n\n    renderButtons = () => {\n        return this.props.lines_available.map((key) => {\n            return (\n                <ToggleButton style={{ textTransform: \"none\", borderRadius: \"0\", minWidth: \"25ch\", maxHeight: \"20px\" }} value={key} key={key} aria-label={key}>\n                    {key}\n                </ToggleButton>\n            );\n        });\n    };\n\n    render() {\n        //console.log(\"Rendering AddGraph\");\n        return (\n            <Dialog open={this.props.show} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Add Graph</DialogTitle>\n                <DialogContent>\n                    <Grid container spacing={2} direction=\"column\" alignItems=\"center\">\n                        <Grid item>\n                            <FormControl>\n                                <InputLabel htmlFor=\"plotname\">Plot Name</InputLabel>\n                                <Input\n                                    id=\"plotname\"\n                                    onChange={(event) => (this.plotname = event.target.value)}\n                                    aria-describedby=\"plotname-helper-text\"\n                                    inputProps={{\n                                        \"aria-label\": \"Plot Name\",\n                                    }}\n                                />\n                                <FormHelperText id=\"plotname-helper-text\">Can be left empty</FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item>\n                            <ToggleButtonGroup\n                                orientation=\"vertical\"\n                                value={this.lines}\n                                onChange={(event, lines) => {\n                                    this.lines = lines;\n                                    this.setState({ render_revision: this.state.render_revision + 1 });\n                                }}\n                                aria-label=\"lines available\"\n                            >\n                                {this.renderButtons()}\n                            </ToggleButtonGroup>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => this.props.addplot(this.plotname, this.lines)} color=\"default\">\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nAddGraph.propTypes = {\n    show: propTypes.bool.isRequired,\n    lines_available: propTypes.array.isRequired,\n    addplot: propTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\nimport propTypes from \"prop-types\";\n\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, InputAdornment, FormControl, Input, InputLabel, FormHelperText, FormControlLabel, Switch, Grid } from \"@material-ui/core\";\n\nexport class GraphSettings extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cols: 0,\n            rateHz: 20,\n            max_datapoints: 100,\n            webgl: true,\n        };\n    }\n\n    componentDidMount() {\n        //Unsafe! Need to get rid of!\n        this.setState({\n            cols: this.props.cols,\n            rateHz: this.props.rateHz,\n            max_datapoints: this.props.max_datapoints,\n            webgl: this.props.webgl,\n        });\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        // Limits re-render\n        if (nextProps.show !== this.props.show || nextState !== this.state) return true;\n        return false;\n    }\n\n    render() {\n        //console.log(\"Rendering GraphSettings\");\n        return (\n            <Dialog open={this.props.show} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Graphs settings</DialogTitle>\n                <DialogContent>\n                    <Grid container spacing={2} direction=\"column\" alignItems=\"flex-start\">\n                        <Grid item>\n                            <FormControl>\n                                <InputLabel htmlFor=\"cols\">Graph columns</InputLabel>\n                                <Input\n                                    id=\"cols\"\n                                    value={this.state.cols}\n                                    onChange={(event) => this.setState({ cols: Math.min(Math.max(parseInt(event.target.value), 1), 12) })}\n                                    aria-describedby=\"cols-helper-text\"\n                                    inputProps={{\n                                        \"aria-label\": \"Graph columns\",\n                                    }}\n                                />\n                                <FormHelperText id=\"cols-helper-text\">Max: 12</FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item>\n                            <FormControl>\n                                <InputLabel htmlFor=\"rateHz\">Render rate</InputLabel>\n                                <Input\n                                    id=\"rateHz\"\n                                    value={this.state.rateHz}\n                                    onChange={(event) => this.setState({ rateHz: Math.min(Math.max(parseInt(event.target.value), 0.5), 20) })}\n                                    endAdornment={<InputAdornment position=\"end\">Hz</InputAdornment>}\n                                    aria-describedby=\"rateHz-helper-text\"\n                                    inputProps={{\n                                        \"aria-label\": \"Render rate\",\n                                    }}\n                                />\n                                <FormHelperText id=\"rateHz-helper-text\">Min: 0.5, Max: 20</FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item>\n                            <FormControl>\n                                <InputLabel htmlFor=\"max_datapoints\">Max data points</InputLabel>\n                                <Input\n                                    id=\"max_datapoints\"\n                                    value={this.state.max_datapoints}\n                                    onChange={(event) => this.setState({ max_datapoints: Math.min(Math.max(parseInt(event.target.value), 20), 10000) })}\n                                    aria-describedby=\"max_datapoints-helper-text\"\n                                    inputProps={{\n                                        \"aria-label\": \"Max data points\",\n                                    }}\n                                />\n                                <FormHelperText id=\"max_datapoints-helper-text\">Max: 10000</FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item>\n                            <FormControlLabel control={<Switch checked={this.state.webgl} onChange={() => this.setState({ webgl: !this.state.webgl })} name=\"webGL\" />} label=\"WebGL support\" />\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => this.props.setSettings(this.state.cols, this.state.rateHz, this.state.max_datapoints, this.state.webgl)} color=\"default\">\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nGraphSettings.propTypes = {\n    show: propTypes.bool.isRequired,\n    cols: propTypes.number.isRequired,\n    rateHz: propTypes.number.isRequired,\n    max_datapoints: propTypes.number.isRequired,\n    webgl: propTypes.bool.isRequired,\n    setSettings: propTypes.func.isRequired,\n};\n","import React, { Component, Fragment } from \"react\";\nimport propTypes from \"prop-types\";\nimport _ from \"lodash\";\n\nimport { ScatterPlot } from \"./ScatterPlot\";\nimport { AddLines } from \"./AddLines\";\nimport { AddGraph } from \"./AddGraph\";\nimport { GraphSettings } from \"./GraphSettings\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { SpeedDial, SpeedDialAction, SpeedDialIcon } from \"@material-ui/lab\";\nimport { Grid } from \"@material-ui/core\";\n\nimport LinearScaleIcon from \"@material-ui/icons/LinearScale\";\nimport EqualizerIcon from \"@material-ui/icons/Equalizer\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\n\nconst line_def_tpl = {\n    x: [],\n    y: [],\n    type: \"scattergl\",\n    name: \"Line 1\",\n    mode: \"lines\", //lines+markers\n    connectgaps: false,\n    datarevision: 0,\n};\nconst plot_def_tpl = {\n    layout: {\n        title: \"debug_filler\",\n        datarevision: 0,\n    },\n    frames: [],\n    config: {},\n    revision: 0,\n    lines_attach: [],\n};\n\nconst styles = (theme) => ({\n    speedDial: {\n        position: \"fixed\",\n        bottom: theme.spacing(1),\n        right: theme.spacing(1),\n    },\n    mainDiv: {\n        flexGrow: 1,\n    },\n});\n\nclass GraphDashboard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show_addlines: false,\n            show_addgraph: false,\n            show_settings: false,\n            layout_cols: 1,\n            rateHz: 10,\n            max_datapoints: 200,\n            webgl: true,\n            speeddial: false,\n            render_revision: 0,\n        };\n        this.wshelper = React.createRef(); //Reference to call sendMessage func inside WebSocketHelper\n    }\n\n    actions = [\n        {\n            icon: <LinearScaleIcon />,\n            name: \"Add Signals\",\n            handler: () => {\n                this.setState({ show_addlines: true });\n            },\n        },\n        {\n            icon: <EqualizerIcon />,\n            name: \"Add Graph\",\n            handler: () => {\n                this.setState({ show_addgraph: true });\n            },\n        },\n        {\n            icon: <SettingsIcon />,\n            name: \"Settings\",\n            handler: () => {\n                this.setState({ show_settings: true });\n            },\n        },\n        {\n            icon: <DeleteForeverIcon />,\n            name: \"DelPlots\",\n            handler: () => {\n                this.plots = {};\n            },\n        },\n        {\n            icon: <DeleteForeverIcon />,\n            name: \"ClearLines\",\n            handler: () => {\n                this.lines = {};\n                this.selected = {};\n            },\n        },\n    ];\n\n    plots = {};\n    lines = {};\n    selected = {};\n    ws_status = \"\";\n    data_counter = 0;\n\n    componentDidMount() {\n        this.render_delay = setInterval(this.renderDelay, 1000 / this.state.rateHz); // Limit render? 4graphs/2lines or 2grapgs/8lines at 20Hz\n        //Real measured - 2 graphs/2 lines at 50ms, 3 graphs/2 lines at ~80ms, 4graphs/2 lines at ~110ms, 5graphs/2 lines at ~140ms (So around 25-30ms each graph?)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.render_delay);\n    }\n\n    shouldComponentUpdate(prevProps, prevState) {\n        if (!this.props.active) return false;\n        if (prevState.render_revision !== this.state.render_revision || prevState.speeddial !== this.state.speeddial || prevState.show_addlines !== this.state.show_addlines || prevState.show_addgraph !== this.state.show_addgraph || prevState.show_settings !== this.state.show_settings) return true;\n        return false;\n    }\n\n    renderDelay = () => {\n        clearInterval(this.render_delay);\n        if (this.data_counter > this.state.render_revision) this.setState({ render_revision: this.data_counter });\n        this.render_delay = setInterval(this.renderDelay, 1000 / this.state.rateHz);\n    };\n\n    messageProcess = (msg_recv) => {\n        // Need to improve, very expensive work!!!\n        Object.keys(this.selected).forEach((key_name) => {\n            this.selected[key_name].forEach((name_y) => {\n                if (msg_recv[key_name]) {\n                    let axis_x = Math.round(msg_recv[key_name][\"logMonoTime\"] / 1000000.0) / 1000; // Convert to seconds with 3 digits after the dot.\n                    let axis_y = null;\n                    if (name_y.startsWith(\":\")) {\n                        const path = name_y.slice(1);\n                        axis_y = _.get(msg_recv[key_name], path, null);\n                    } else axis_y = msg_recv[key_name][name_y];\n\n                    const line_name = key_name + \":\" + name_y;\n                    if (Array.isArray(axis_y)) {\n                        axis_y.forEach((y_value, index) => {\n                            if (typeof y_value === \"boolean\") y_value += 0; // Converts boolean to int\n                            if (typeof y_value !== \"number\") y_value = null;\n                            this.addUpdateLines(line_name + index, axis_x, y_value, this.state.max_datapoints); // Fix the name for Y axis !!!!!\n                        });\n                    } else {\n                        if (typeof axis_y === \"boolean\") axis_y += 0; // Converts boolean to int\n                        if (typeof axis_y !== \"number\") axis_y = null;\n                        this.addUpdateLines(name_y, axis_x, axis_y, this.state.max_datapoints);\n                    }\n                }\n            });\n        });\n    };\n\n    addUpdateLines = (name_y, axis_x, axis_y, values_limit = 100) => {\n        if (!this.lines[name_y]) {\n            const line_tpl = JSON.parse(JSON.stringify(line_def_tpl));\n            line_tpl[\"type\"] = this.state.webgl ? \"scattergl\" : \"scatter\";\n            line_tpl[\"name\"] = name_y;\n            this.lines[name_y] = line_tpl;\n        }\n\n        if (this.lines[name_y].x.slice(-1)[0] >= axis_x) return; // Skip same values for axis X (time)\n\n        this.lines[name_y].x.push(axis_x);\n        this.lines[name_y].y.push(axis_y);\n        if (this.lines[name_y].x.length > values_limit && values_limit !== 0) {\n            this.lines[name_y].x.shift();\n            this.lines[name_y].y.shift();\n        }\n        this.lines[name_y].datarevision += 1;\n        this.data_counter += 1;\n    };\n\n    addUpdatePlots = (plot_name = \"\", datarevision = 0, lines = []) => {\n        if (plot_name.length === 0) plot_name = (Math.random() + 1).toString(36).substring(7); // Generate random name\n        if (!this.plots[plot_name] && lines.length > 0) {\n            const plot_tpl = JSON.parse(JSON.stringify(plot_def_tpl));\n            plot_tpl[\"layout\"][\"title\"] = plot_name;\n            plot_tpl[\"lines_attach\"] = lines;\n            this.plots[plot_name] = plot_tpl;\n        }\n        if (lines.length > 0) this.plots[plot_name].lines_attach = lines;\n        if (this.plots[plot_name]) {\n            this.plots[plot_name].revision = datarevision;\n            this.plots[plot_name].layout.datarevision = datarevision;\n        }\n    };\n\n    renderReadyPlots = () => {\n        const plots = [];\n        Object.keys(this.plots).forEach((key) => {\n            if (this.plots[key].lines_attach.length) {\n                const lines = {};\n                var datarevision_sum = 0;\n                Object.values(this.plots[key].lines_attach).forEach((line_name) => {\n                    if (this.lines[line_name]) {\n                        lines[line_name] = this.lines[line_name];\n                        datarevision_sum += this.lines[line_name].datarevision;\n                    }\n                });\n                this.addUpdatePlots(key, datarevision_sum);\n                plots.push(\n                    <Grid item key={key} xs={12} md={12 / this.state.layout_cols}>\n                        <ScatterPlot event={this.plots[key]} lines={lines} />\n                    </Grid>,\n                );\n            }\n        });\n        return plots;\n    };\n\n    render() {\n        //console.log(\"Rendering GraphDashboard\");\n        const { classes } = this.props;\n        return (\n            <Fragment>\n                <Grid container direction=\"row\" spacing={0} justify=\"flex-start\" alignItems=\"flex-start\">\n                    {this.renderReadyPlots()}\n                </Grid>\n                {this.state.show_addlines ? (\n                    <AddLines\n                        setLogParams={(event) => {\n                            this.setState({ show_addlines: false });\n                            this.selected = event;\n                        }}\n                        show={this.state.show_addlines}\n                        prev_selection={this.selected}\n                    />\n                ) : null}\n                {this.state.show_addgraph ? <AddGraph addplot={(plot_name, lines) => this.setState({ show_addgraph: false }, this.addUpdatePlots(plot_name, 0, lines))} show={this.state.show_addgraph} lines_available={Object.keys(this.lines)} /> : null}\n                {this.state.show_settings ? (\n                    <GraphSettings\n                        setSettings={(cols, rate, datapoints, webgl) => this.setState({ show_settings: false, layout_cols: cols, rateHz: rate, max_datapoints: datapoints, webgl: webgl })}\n                        show={this.state.show_settings}\n                        cols={this.state.layout_cols}\n                        rateHz={this.state.rateHz}\n                        max_datapoints={this.state.max_datapoints}\n                        webgl={this.state.webgl}\n                    />\n                ) : null}\n                <SpeedDial ariaLabel=\"SpeedDial tooltip example\" className={classes.speedDial} icon={<SpeedDialIcon />} FabProps={{ size: \"small\", color: \"secondary\" }} onClick={() => this.setState({ speeddial: !this.state.speeddial })} open={this.state.speeddial}>\n                    {this.actions.map((action) => (\n                        <SpeedDialAction key={action.name} icon={action.icon} tooltipTitle={action.name} tooltipOpen onClick={action.handler} />\n                    ))}\n                </SpeedDial>\n            </Fragment>\n        );\n    }\n}\n\nGraphDashboard.propTypes = {\n    classes: propTypes.object.isRequired,\n    active: propTypes.bool.isRequired,\n};\n\nexport default withStyles(styles)(GraphDashboard);\n","import React, { Component } from \"react\";\nimport propTypes from \"prop-types\";\nimport _ from \"lodash\";\n\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, Input, InputLabel, Grid, FormControlLabel, Switch, Select, MenuItem } from \"@material-ui/core\";\n\nexport class JoystickSettings extends Component {\n    constructor(props) {\n        super(props);\n        this.state = this.props.joy_finetune;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextState !== this.state;\n    }\n\n    render() {\n        //console.log(\"Rendering JoystickSettings\");\n        const new_state = _.cloneDeep(this.state);\n        return (\n            <Dialog open={this.props.show} aria-labelledby=\"joystick-settings\">\n                <DialogTitle id=\"joystick-settings\">Joystick settings</DialogTitle>\n                <DialogContent>\n                    <Grid container spacing={1} direction=\"row\" alignItems=\"center\">\n                        <Grid item xs={6}>\n                            <Grid container alignItems=\"center\" spacing={2}>\n                                <Grid item xs={6} align=\"center\">\n                                    <FormControl>\n                                        <InputLabel htmlFor=\"axis_0_neg\">axis_0 negative</InputLabel>\n                                        <Input\n                                            id=\"axis_0_neg\"\n                                            value={new_state.axes_scale[0][0]}\n                                            onChange={(event) => {\n                                                new_state.axes_scale[0][0] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            inputProps={{\n                                                \"aria-label\": \"axis_0 negative\",\n                                                style: { textAlign: \"center\" },\n                                            }}\n                                        />\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={6} align=\"center\">\n                                    <FormControl>\n                                        <InputLabel htmlFor=\"axis_0_pos\">axis_0 positive</InputLabel>\n                                        <Input\n                                            id=\"axis_0_pos\"\n                                            value={new_state.axes_scale[0][1]}\n                                            onChange={(event) => {\n                                                new_state.axes_scale[0][1] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            inputProps={{\n                                                \"aria-label\": \"axis_0 positive\",\n                                                style: { textAlign: \"center\" },\n                                            }}\n                                        />\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={6} align=\"center\">\n                                    <FormControl>\n                                        <InputLabel htmlFor=\"axis_1_neg\">axis_1 negative</InputLabel>\n                                        <Input\n                                            id=\"axis_1_neg\"\n                                            value={new_state.axes_scale[1][0]}\n                                            onChange={(event) => {\n                                                new_state.axes_scale[1][0] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            inputProps={{\n                                                \"aria-label\": \"axis_1 negative\",\n                                                style: { textAlign: \"center\" },\n                                            }}\n                                        />\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={6} align=\"center\">\n                                    <FormControl>\n                                        <InputLabel htmlFor=\"axis_1_pos\">axis_1 positive</InputLabel>\n                                        <Input\n                                            id=\"axis_1_pos\"\n                                            value={new_state.axes_scale[1][1]}\n                                            onChange={(event) => {\n                                                new_state.axes_scale[1][1] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            inputProps={{\n                                                \"aria-label\": \"axis_1 positive\",\n                                                style: { textAlign: \"center\" },\n                                            }}\n                                        />\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12} align=\"center\">\n                                    <FormControl fullWidth>\n                                        <InputLabel htmlFor=\">axis_0_deadzone\">axis_0 deadzone</InputLabel>\n                                        <Input\n                                            id=\"axis_0_deadzone\"\n                                            value={new_state.axes_deadzone[0]}\n                                            onChange={(event) => {\n                                                new_state.axes_deadzone[0] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            inputProps={{\n                                                \"aria-label\": \"axis_0 deadzone\",\n                                                style: { textAlign: \"center\" },\n                                            }}\n                                        />\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12} align=\"center\">\n                                    <FormControl fullWidth>\n                                        <InputLabel htmlFor=\"axis_1_deadzone\">axis_1 deadzone</InputLabel>\n                                        <Input\n                                            id=\"axis_1_deadzone\"\n                                            value={new_state.axes_deadzone[1]}\n                                            onChange={(event) => {\n                                                new_state.axes_deadzone[1] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            inputProps={{\n                                                \"aria-label\": \"axis_1 deadzone\",\n                                                style: { textAlign: \"center\" },\n                                            }}\n                                        />\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12} align=\"center\">\n                                    <FormControl fullWidth>\n                                        <InputLabel htmlFor=\"axis_0_mode\">axis_0 mode</InputLabel>\n                                        <Select\n                                            id=\"axis_0_mode\"\n                                            value={new_state.axesMode[0]}\n                                            onChange={(event) => {\n                                                new_state.axesMode[0] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            displayEmpty\n                                            inputProps={{ \"aria-label\": \"axis_0 mode\" }}\n                                        >\n                                            <MenuItem value=\"interceptor\">interceptor</MenuItem>\n                                            <MenuItem value=\"injector\">injector</MenuItem>\n                                            <MenuItem value=\"adder\">adder</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12} align=\"center\">\n                                    <FormControl fullWidth>\n                                        <InputLabel htmlFor=\"axis_1_mode\">axis_1 mode</InputLabel>\n                                        <Select\n                                            id=\"axis_1_mode\"\n                                            value={new_state.axesMode[1]}\n                                            onChange={(event) => {\n                                                new_state.axesMode[1] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            displayEmpty\n                                            inputProps={{ \"aria-label\": \"axis_1 mode\" }}\n                                        >\n                                            <MenuItem value=\"interceptor\">interceptor</MenuItem>\n                                            <MenuItem value=\"injector\">injector</MenuItem>\n                                            <MenuItem value=\"adder\">adder</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12} align=\"center\">\n                                    <FormControlLabel\n                                        control={\n                                            <Switch\n                                                checked={new_state.restJoystick_0}\n                                                onChange={() => {\n                                                    new_state.restJoystick_0 = !new_state.restJoystick_0;\n                                                    this.setState(new_state);\n                                                }}\n                                                name=\"restJoystick_0\"\n                                            />\n                                        }\n                                        label=\"vJoystick_0 rest\"\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Grid container alignItems=\"center\" spacing={2}>\n                                <Grid item xs={6} align=\"center\">\n                                    <FormControl>\n                                        <InputLabel htmlFor=\"axis_2_neg\">axis_2 negative</InputLabel>\n                                        <Input\n                                            id=\"axis_2_neg\"\n                                            value={new_state.axes_scale[2][0]}\n                                            onChange={(event) => {\n                                                new_state.axes_scale[2][0] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            inputProps={{\n                                                \"aria-label\": \"axis_2 negative\",\n                                                style: { textAlign: \"center\" },\n                                            }}\n                                        />\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={6} align=\"center\">\n                                    <FormControl>\n                                        <InputLabel htmlFor=\"axis_2_pos\">axis_2 positive</InputLabel>\n                                        <Input\n                                            id=\"axis_2_pos\"\n                                            value={new_state.axes_scale[2][1]}\n                                            onChange={(event) => {\n                                                new_state.axes_scale[2][1] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            inputProps={{\n                                                \"aria-label\": \"axis_2 positive\",\n                                                style: { textAlign: \"center\" },\n                                            }}\n                                        />\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={6} align=\"center\">\n                                    <FormControl>\n                                        <InputLabel htmlFor=\"axis_3_neg\">axis_3 negative</InputLabel>\n                                        <Input\n                                            id=\"axis_3_neg\"\n                                            value={new_state.axes_scale[3][0]}\n                                            onChange={(event) => {\n                                                new_state.axes_scale[3][0] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            inputProps={{\n                                                \"aria-label\": \"axis_3 negative\",\n                                                style: { textAlign: \"center\" },\n                                            }}\n                                        />\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={6} align=\"center\">\n                                    <FormControl>\n                                        <InputLabel htmlFor=\"axis_3_pos\">axis_3 positive</InputLabel>\n                                        <Input\n                                            id=\"axis_3_pos\"\n                                            value={new_state.axes_scale[3][1]}\n                                            onChange={(event) => {\n                                                new_state.axes_scale[3][1] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            inputProps={{\n                                                \"aria-label\": \"axis_3 positive\",\n                                                style: { textAlign: \"center\" },\n                                            }}\n                                        />\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12} align=\"center\">\n                                    <FormControl fullWidth>\n                                        <InputLabel htmlFor=\">axis_2_deadzone\">axis_2 deadzone</InputLabel>\n                                        <Input\n                                            id=\"axis_2_deadzone\"\n                                            value={new_state.axes_deadzone[2]}\n                                            onChange={(event) => {\n                                                new_state.axes_deadzone[2] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            inputProps={{\n                                                \"aria-label\": \"axis_2 deadzone\",\n                                                style: { textAlign: \"center\" },\n                                            }}\n                                        />\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12} align=\"center\">\n                                    <FormControl fullWidth>\n                                        <InputLabel htmlFor=\"axis_3_deadzone\">axis_3 deadzone</InputLabel>\n                                        <Input\n                                            id=\"axis_3_deadzone\"\n                                            value={new_state.axes_deadzone[3]}\n                                            onChange={(event) => {\n                                                new_state.axes_deadzone[3] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            inputProps={{\n                                                \"aria-label\": \"axis_3 deadzone\",\n                                                style: { textAlign: \"center\" },\n                                            }}\n                                        />\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12} align=\"center\">\n                                    <FormControl fullWidth>\n                                        <InputLabel htmlFor=\"axis_2_mode\">axis_2 mode</InputLabel>\n                                        <Select\n                                            id=\"axis_2_mode\"\n                                            value={new_state.axesMode[2]}\n                                            onChange={(event) => {\n                                                new_state.axesMode[2] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            displayEmpty\n                                            inputProps={{ \"aria-label\": \"axis_2 mode\" }}\n                                        >\n                                            <MenuItem value=\"interceptor\">interceptor</MenuItem>\n                                            <MenuItem value=\"injector\">injector</MenuItem>\n                                            <MenuItem value=\"adder\">adder</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12} align=\"center\">\n                                    <FormControl fullWidth>\n                                        <InputLabel htmlFor=\"axis_3_mode\">axis_3 mode</InputLabel>\n                                        <Select\n                                            id=\"axis_3_mode\"\n                                            value={new_state.axesMode[3]}\n                                            onChange={(event) => {\n                                                new_state.axesMode[3] = event.target.value;\n                                                this.setState(new_state);\n                                            }}\n                                            displayEmpty\n                                            inputProps={{ \"aria-label\": \"axis_3 mode\" }}\n                                        >\n                                            <MenuItem value=\"interceptor\">interceptor</MenuItem>\n                                            <MenuItem value=\"injector\">injector</MenuItem>\n                                            <MenuItem value=\"adder\">adder</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </Grid>\n                                <Grid item xs={12} align=\"center\">\n                                    <FormControlLabel\n                                        control={\n                                            <Switch\n                                                checked={new_state.restJoystick_1}\n                                                onChange={() => {\n                                                    new_state.restJoystick_1 = !new_state.restJoystick_1;\n                                                    this.setState(new_state);\n                                                }}\n                                                name=\"restJoystick_1\"\n                                            />\n                                        }\n                                        label=\"vJoystick_1 rest\"\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => this.props.setSettings(this.state)} color=\"default\">\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nJoystickSettings.propTypes = {\n    show: propTypes.bool.isRequired,\n    joy_finetune: propTypes.object.isRequired,\n    setSettings: propTypes.func.isRequired,\n};\n","import React, { Component, Fragment } from \"react\";\nimport propTypes from \"prop-types\";\n\nimport { JoystickSettings } from \"./JoystickSettings\";\nimport ReactNipple from \"react-nipple\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { SpeedDial, SpeedDialAction, SpeedDialIcon } from \"@material-ui/lab\";\n\nimport SyncIcon from \"@material-ui/icons/Sync\";\nimport SyncDisabledIcon from \"@material-ui/icons/SyncDisabled\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\n\nconst styles = (theme) => ({\n    joystick: {\n        //background: '#222',\n        //color: '#efefef',\n        height: \"80vh\",\n    },\n    speedDial: {\n        position: \"fixed\",\n        bottom: theme.spacing(1),\n        right: theme.spacing(1),\n    },\n});\n\nclass Joystick extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show_settings: false,\n            rateHz: 10,\n            revision: 0,\n            speeddial: false,\n            enabled: false,\n        };\n    }\n\n    joystick_msg = {\n        testJoystick: {\n            axes: [0, 0, 0, 0], // Axis 0, 1, 2, 3\n            buttons: [],\n            enabled: true,\n            axesMode: [\"\", \"\", \"\", \"\"], // Axis 0, 1, 2, 3\n        },\n    };\n\n    joy_finetune = {\n        axes_scale: [\n            [1, 1], // axis_0\n            [1, 1], // axis_1\n            [1, 1], // axis_2\n            [1, 1], // axis_3\n        ],\n        axes_deadzone: [0.01, 0.01, 0.01, 0.01], // Axis 0, 1, 2, 3\n        restJoystick_0: true,\n        restJoystick_1: true,\n        axesMode: [\"interceptor\", \"interceptor\", \"interceptor\", \"interceptor\"],\n    };\n\n    last_timestamp = 0;\n    data_revision = 0;\n    renderJoystick_0 = true;\n    renderJoystick_1 = true;\n\n    componentDidMount() {\n        this.render_delay = setInterval(this.renderDelay, 1000 / this.state.rateHz);\n        this.checkJoy = setInterval(this.realGamepad, 50);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.render_delay);\n        clearInterval(this.checkJoy);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!this.props.active) return false;\n        return nextState.revision !== this.state.revision || nextState.speeddial !== this.state.speeddial || nextState !== this.state.show_settings;\n    }\n\n    renderDelay = () => {\n        clearInterval(this.render_delay);\n        if (this.state.enabled) {\n            this.joystick_msg.testJoystick.axesMode = this.joy_finetune.axesMode;\n            this.props.procData(this.joystick_msg);\n        }\n        if (this.state.revision !== this.data_revision) this.setState({ revision: this.data_revision });\n        this.render_delay = setInterval(this.renderDelay, 1000 / this.state.rateHz);\n    };\n\n    resetMessage = () => {\n        this.joystick_msg.testJoystick.enabled = this.state.enabled;\n        if (this.state.enabled) return;\n        this.props.procData(this.joystick_msg);\n    };\n\n    realGamepad = () => {\n        const gamepads = navigator.getGamepads();\n        Object.values(gamepads).forEach((gamepad) => {\n            if (!gamepad || gamepad.timestamp === this.last_timestamp || gamepad.id.startsWith(\"Surface\")) return; //\"surface\" - device that is reported but not considered as a gamepad for our purpose!\n\n            gamepad.axes.forEach((value, index) => {\n                let axis = value;\n                if (index < this.joy_finetune.axes_scale.length) {\n                    // Apply finetune options only for limited amount of axes(4)\n                    const deadzone = parseFloat(this.joy_finetune.axes_deadzone[index]);\n                    const scale_neg = parseFloat(this.joy_finetune.axes_scale[index][0]);\n                    const scale_pos = parseFloat(this.joy_finetune.axes_scale[index][1]);\n                    if (-deadzone < axis && axis < deadzone) axis = 0;\n                    if (axis < 0) axis *= scale_neg;\n                    else axis *= scale_pos;\n                }\n                this.joystick_msg.testJoystick.axes[index] = axis;\n            });\n\n            const buttons = [];\n            Object.values(gamepad.buttons).forEach((button) => {\n                buttons.push(button.value);\n            });\n            this.joystick_msg.testJoystick.buttons = buttons;\n            this.data_revision += 1;\n            this.last_timestamp = gamepad.timestamp;\n        });\n    };\n\n    virtualJoystick = (joy_index, data) => {\n        if (data === 0) {\n            this.joystick_msg.testJoystick.axes[joy_index] = 0;\n            this.joystick_msg.testJoystick.axes[joy_index + 1] = 0;\n            this.data_revision += 1;\n            return;\n        }\n        const size_scale = data.instance.options.size / 2;\n        let axis_x = ((data.position.x - data.instance.position.x) / size_scale) * !data.lockX;\n        let axis_y = ((data.position.y - data.instance.position.y) / size_scale) * !data.lockY;\n        const axes_scale = this.joy_finetune.axes_scale;\n        if (axis_x < 0) axis_x *= parseFloat(axes_scale[joy_index][0]);\n        else axis_x *= parseFloat(axes_scale[joy_index][1]);\n        if (axis_y < 0) parseFloat((axis_y *= axes_scale[joy_index + 1][0]));\n        else axis_y *= parseFloat(axes_scale[joy_index + 1][1]);\n        this.joystick_msg.testJoystick.axes[joy_index] = axis_x;\n        this.joystick_msg.testJoystick.axes[joy_index + 1] = axis_y;\n        this.data_revision += 1;\n    };\n\n    render() {\n        //console.log(\"Rendering Joystick\");\n        const { classes } = this.props;\n        return (\n            <Fragment>\n                <Grid className={classes.joystick} container spacing={0} direction=\"row\" justify=\"center\" alignItems=\"center\">\n                    <Grid item xs={6} align=\"center\">\n                        <Typography variant=\"subtitle2\">\n                            X:{this.joystick_msg.testJoystick.axes[0].toFixed(3)} / Y:{this.joystick_msg.testJoystick.axes[1].toFixed(3)}\n                        </Typography>\n                        {this.renderJoystick_0 ? (\n                            <ReactNipple\n                                options={{\n                                    mode: \"semi\",\n                                    position: { top: \"50%\", left: \"50%\" },\n                                    color: \"red\",\n                                    size: 200,\n                                    dynamicPage: true,\n                                    lockX: false,\n                                    lockY: false,\n                                    restJoystick: this.joy_finetune.restJoystick_0,\n                                    threshold: 0.06,\n                                }}\n                                style={{\n                                    outline: \"1px dashed grey\",\n                                    height: \"75vh\",\n                                    position: \"relative\",\n                                }}\n                                onMove={(evt, data) => this.virtualJoystick(0, data)}\n                                onEnd={() => {\n                                    if (this.joy_finetune.restJoystick_0) this.virtualJoystick(0, 0);\n                                }} // Reseting to 0 on joystick rest (only when restJoystick: true)\n                            />\n                        ) : (\n                            ((this.renderJoystick_0 = true), null)\n                        )}\n                    </Grid>\n                    <Grid item xs={6} align=\"center\">\n                        <Typography variant=\"subtitle2\">\n                            X:{this.joystick_msg.testJoystick.axes[2].toFixed(3)} / Y:{this.joystick_msg.testJoystick.axes[3].toFixed(3)}\n                        </Typography>\n                        {this.renderJoystick_1 ? (\n                            <ReactNipple\n                                options={{\n                                    mode: \"semi\",\n                                    position: { top: \"50%\", left: \"50%\" },\n                                    color: \"red\",\n                                    size: 200,\n                                    dynamicPage: true,\n                                    lockX: false,\n                                    lockY: false,\n                                    restJoystick: this.joy_finetune.restJoystick_1,\n                                    threshold: 0.06,\n                                }}\n                                style={{\n                                    outline: \"1px dashed grey\",\n                                    height: \"75vh\",\n                                    position: \"relative\",\n                                }}\n                                onMove={(evt, data) => this.virtualJoystick(2, data)}\n                                onEnd={() => {\n                                    if (this.joy_finetune.restJoystick_1) this.virtualJoystick(2, 0);\n                                }}\n                            />\n                        ) : (\n                            ((this.renderJoystick_1 = true), null)\n                        )}\n                    </Grid>\n                </Grid>\n                <SpeedDial ariaLabel=\"SpeedDial tooltip example\" className={classes.speedDial} icon={<SpeedDialIcon />} FabProps={{ size: \"small\", color: \"secondary\" }} onClick={() => this.setState({ speeddial: !this.state.speeddial })} open={this.state.speeddial}>\n                    <SpeedDialAction icon={this.state.enabled ? <SyncDisabledIcon /> : <SyncIcon />} tooltipTitle={this.state.enabled ? \"Disable\" : \"Enable\"} tooltipOpen onClick={() => this.setState({ enabled: !this.state.enabled }, this.resetMessage)} />\n                    <SpeedDialAction\n                        icon={<SettingsIcon />}\n                        tooltipTitle=\"Settings\"\n                        tooltipOpen\n                        onClick={() => {\n                            this.setState({ show_settings: true });\n                        }}\n                    />\n                </SpeedDial>\n                {this.state.show_settings ? (\n                    <JoystickSettings\n                        setSettings={(joy_finetune) => {\n                            this.setState({ show_settings: false });\n                            this.joy_finetune = joy_finetune;\n                            this.renderJoystick_0 = false;\n                            this.renderJoystick_1 = false;\n                        }}\n                        show={this.state.show_settings}\n                        joy_finetune={this.joy_finetune}\n                    />\n                ) : null}\n            </Fragment>\n        );\n    }\n}\n\nJoystick.propTypes = {\n    classes: propTypes.object.isRequired,\n    procData: propTypes.func.isRequired,\n    active: propTypes.bool.isRequired,\n};\n\nexport default withStyles(styles)(Joystick);\n","import React, { Component, Fragment } from \"react\";\nimport propTypes from \"prop-types\";\nimport _ from \"lodash\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { FormControl, Input, InputLabel, Grid, FormControlLabel, Switch, Fab } from \"@material-ui/core\";\n\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\n\nconst styles = (theme) => ({\n    loadFab: {\n        position: \"fixed\",\n        bottom: theme.spacing(1),\n        right: theme.spacing(14),\n    },\n    saveFab: {\n        position: \"fixed\",\n        bottom: theme.spacing(1),\n        right: theme.spacing(1),\n    },\n    extendedIcon: {\n        marginRight: theme.spacing(1),\n    },\n});\n\nclass OPEdit extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rateHz: 10,\n            revision: 0,\n            op_data: {},\n        };\n    }\n\n    last_timestamp = 0;\n    data_revision = 0;\n\n    componentDidMount() {\n        this.render_delay = setInterval(this.renderDelay, 1000 / this.state.rateHz);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.render_delay);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!this.props.active) return false;\n        return nextState.revision !== this.state.revision;\n    }\n\n    renderDelay = () => {\n        clearInterval(this.render_delay);\n        this.setState({ revision: this.revision + 1 });\n        this.render_delay = setInterval(this.renderDelay, 1000 / this.state.rateHz);\n    };\n\n    messageProcess = (msg_recv) => {\n        // Need to improve, very expensive work!!!\n        if (\"opEdit\" in msg_recv) this.setState({ op_data: msg_recv.opEdit });\n    };\n\n    renderParams = (op_data) => {\n        const render_obj = [];\n\n        Object.entries(op_data).forEach(([key, value]) => {\n            if (typeof value === \"boolean\") {\n                render_obj.push(\n                    <Grid item xs={12} sm={6} md={3} key={key}>\n                        <FormControlLabel\n                            id={key}\n                            control={\n                                <Switch\n                                    checked={value}\n                                    onChange={() => {\n                                        op_data[key] = !op_data[key];\n                                        this.setState({ op_data: op_data });\n                                    }}\n                                    name={key}\n                                />\n                            }\n                            label={key}\n                        />\n                    </Grid>,\n                );\n            } else if (typeof value === \"object\") {\n                render_obj.push(\n                    <Grid item xs={12} sm={6} md={3} key={key}>\n                        <FormControl fullWidth>\n                            <InputLabel htmlFor=\"cols\">{key}</InputLabel>\n                            <Input\n                                id={key}\n                                value={value}\n                                //value={new_state.axes_scale[0][0]}\n                                onChange={(event) => {\n                                    op_data[key] = event.target.value.split(\",\").map((x) => parseFloat(x));\n                                    this.setState({ op_data: op_data });\n                                }}\n                                //onChange={event => this.setState({ cols: Math.min(Math.max(parseInt(event.target.value), 1), 12) })}\n                                aria-describedby=\"{key}-helper-text\"\n                                inputProps={{\n                                    \"aria-label\": { key },\n                                    style: { textAlign: \"center\" },\n                                }}\n                            />\n                            {/* <FormHelperText id=\"cols-helper-text\">Max: 12</FormHelperText> */}\n                        </FormControl>\n                    </Grid>,\n                );\n            } else if (typeof value === \"number\") {\n                render_obj.push(\n                    <Grid item xs={12} sm={6} md={3} key={key}>\n                        <FormControl fullWidth>\n                            <InputLabel htmlFor=\"cols\">{key}</InputLabel>\n                            <Input\n                                id={key}\n                                value={value}\n                                //value={new_state.axes_scale[0][0]}\n                                onChange={(event) => {\n                                    op_data[key] = parseFloat(event.target.value);\n                                    this.setState({ op_data: op_data });\n                                }}\n                                //onChange={event => this.setState({ cols: Math.min(Math.max(parseInt(event.target.value), 1), 12) })}\n                                aria-describedby=\"{key}-helper-text\"\n                                inputProps={{\n                                    \"aria-label\": { key },\n                                    style: { textAlign: \"center\" },\n                                }}\n                            />\n                            {/* <FormHelperText id=\"cols-helper-text\">Max: 12</FormHelperText> */}\n                        </FormControl>\n                    </Grid>,\n                );\n            } else {\n                render_obj.push(\n                    <Grid item xs={12} sm={6} md={3} key={key}>\n                        <FormControl fullWidth>\n                            <InputLabel htmlFor=\"cols\">{key}</InputLabel>\n                            <Input\n                                id={key}\n                                value={value}\n                                //value={new_state.axes_scale[0][0]}\n                                onChange={(event) => {\n                                    op_data[key] = event.target.value;\n                                    this.setState({ op_data: op_data });\n                                }}\n                                //onChange={event => this.setState({ cols: Math.min(Math.max(parseInt(event.target.value), 1), 12) })}\n                                aria-describedby=\"{key}-helper-text\"\n                                inputProps={{\n                                    \"aria-label\": { key },\n                                    style: { textAlign: \"center\" },\n                                }}\n                            />\n                            {/* <FormHelperText id=\"cols-helper-text\">Max: 12</FormHelperText> */}\n                        </FormControl>\n                    </Grid>,\n                );\n            }\n        });\n        return render_obj;\n    };\n\n    render() {\n        //console.log(\"Rendering OPEdit\");\n        const { classes } = this.props;\n        const op_data = _.cloneDeep(this.state.op_data);\n        return (\n            <Fragment>\n                <div style={{ padding: 20 }}>\n                    <Grid container spacing={2} direction=\"row\" justify=\"flex-start\" alignItems=\"center\">\n                        {this.renderParams(op_data)}\n                        <Grid item></Grid>\n                    </Grid>\n                </div>\n                <Fab variant=\"extended\" color=\"secondary\" className={classes.loadFab} onClick={() => this.props.procData({ opEdit: { loadRequest: true } })}>\n                    <ArrowDownwardIcon className={classes.extendedIcon} />\n                    Load\n                </Fab>\n                <Fab variant=\"extended\" color=\"secondary\" className={classes.saveFab} onClick={() => this.props.procData({ opEdit: this.state.op_data })}>\n                    <ArrowUpwardIcon className={classes.extendedIcon} />\n                    Save\n                </Fab>\n            </Fragment>\n        );\n    }\n}\n\nOPEdit.propTypes = {\n    classes: propTypes.object.isRequired,\n    procData: propTypes.func.isRequired,\n    active: propTypes.bool.isRequired,\n};\n\nexport default withStyles(styles)(OPEdit);\n","import React, { Component } from \"react\";\nimport propTypes from \"prop-types\";\n\nexport class TabPanel extends Component {\n    render() {\n        //console.log(\"Rendering TabPanel\");\n        return (\n            <div role=\"tabpanel\" hidden={this.props.value !== this.props.index} id={`plugin-tabpanel-${this.props.index}`} aria-labelledby={`plugin-tab-${this.props.index}`} {...this.props}>\n                {this.props.children}\n                {/* {this.props.value === this.props.index && this.props.children} //Disconnects component on div hide  */}\n            </div>\n        );\n    }\n}\n\nTabPanel.propTypes = {\n    children: propTypes.node,\n    index: propTypes.any.isRequired,\n    value: propTypes.any.isRequired,\n};\n","import { Component } from \"react\";\nimport propTypes from \"prop-types\";\n\nexport class WebSocketHelper extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ws: null,\n        };\n    }\n\n    timeout = 250; // milliseconds\n\n    componentDidMount() {\n        this.connect();\n        this.keep_alive = setInterval(() => {\n            this.sendMessage({ keepAlive: {} });\n        }, 2500);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.keep_alive);\n        this.setState({ ws: null });\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return nextProps.ws_url !== this.props.ws_url;\n    }\n\n    connect = () => {\n        var ws = new WebSocket(this.props.ws_url);\n        this.props.status(\"connecting\");\n        let that = this; // cache the this\n        var connectInterval;\n\n        ws.onopen = () => {\n            this.setState({ ws: ws });\n            this.props.status(\"connected\");\n            that.timeout = 250;\n            clearTimeout(connectInterval);\n        };\n\n        ws.onclose = (e) => {\n            console.log(`Socket is closed. Reconnect will be attempted in ${Math.min(5000 / 1000, (that.timeout * 2) / 1000)} second.`, e.reason);\n            this.props.status(\"closed\");\n            that.timeout = that.timeout * 2;\n            connectInterval = setTimeout(this.checkSocketConnection, Math.min(5000, that.timeout));\n        };\n\n        ws.onerror = (err) => {\n            console.error(\"Socket encountered error: \", err.message, \"Closing socket\");\n\n            this.props.status(\"error\");\n            ws.close();\n        };\n\n        ws.onmessage = (event) => {\n            try {\n                const data = JSON.parse(event.data);\n\n                // Check if the message contains the list of publishers and signals\n                if (data.publishers && data.signals) {\n                    // Update the state of your application with the new list\n                    this.props.updatePublishersAndSignals(data.publishers, data.signals);\n                } else {\n                    this.props.messageProcess(data);\n                }\n            } catch (e) {\n                console.log(e);\n                console.log(event.data);\n            }\n        };\n    };\n\n    sendMessage = (msg) => {\n        const { ws } = this.state;\n        if (ws && ws.readyState !== WebSocket.CLOSED) ws.send(JSON.stringify(msg));\n    };\n\n    checkSocketConnection = () => {\n        const { ws } = this.state;\n        if (!ws || ws.readyState === WebSocket.CLOSED) this.connect(this.props.ws_url);\n    };\n\n    render() {\n        //console.log(\"Rendering WebSocketHelper\");\n        return null;\n    }\n}\n\nWebSocketHelper.propTypes = {\n    ws_url: propTypes.string.isRequired,\n    status: propTypes.func.isRequired,\n    messageProcess: propTypes.func.isRequired,\n};\n","import React, { Component } from \"react\";\nimport propTypes from \"prop-types\";\n\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, InputAdornment, FormControl, Input, InputLabel, FormHelperText, Grid, FormControlLabel, Switch } from \"@material-ui/core\";\n\nexport class MainSettings extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ws_url: \"ws://\",\n            rateHz: 20,\n            dark_theme: false,\n        };\n    }\n\n    componentDidMount() {\n        //Unsafe! Need to get rid of!\n        this.setState({\n            ws_url: this.props.ws_url,\n            rateHz: this.props.rateHz,\n            dark_theme: this.props.dark_theme,\n        });\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        // Limits re-render\n        if (nextProps.show !== this.props.show || nextState !== this.state) return true;\n        return false;\n    }\n\n    render() {\n        //console.log(\"Rendering MainSettings\");\n        return (\n            <Dialog open={this.props.show} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Main settings</DialogTitle>\n                <DialogContent>\n                    <Grid container spacing={2} direction=\"column\" alignItems=\"flex-start\">\n                        <Grid item>\n                            <FormControl>\n                                <InputLabel htmlFor=\"ws_url\">WebSocket URL</InputLabel>\n                                <Input\n                                    id=\"ws_url\"\n                                    value={this.state.ws_url}\n                                    onChange={(event) => this.setState({ ws_url: event.target.value })}\n                                    aria-describedby=\"ws_url-helper-text\"\n                                    inputProps={{\n                                        \"aria-label\": \"WebSocket URL\",\n                                    }}\n                                />\n                                <FormHelperText id=\"ws_url-helper-text\">Tethered WiFi ws://192.168.43.1:8989</FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item>\n                            <FormControl>\n                                <InputLabel htmlFor=\"rateHz\">Render rate</InputLabel>\n                                <Input\n                                    id=\"rateHz\"\n                                    value={this.state.rateHz}\n                                    onChange={(event) => this.setState({ rateHz: Math.min(Math.max(parseInt(event.target.value), 0.5), 20) })}\n                                    endAdornment={<InputAdornment position=\"end\">Hz</InputAdornment>}\n                                    aria-describedby=\"rateHz-helper-text\"\n                                    inputProps={{\n                                        \"aria-label\": \"Render rate\",\n                                    }}\n                                />\n                                <FormHelperText id=\"rateHz-helper-text\">Min: 0.5, Max: 20</FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item>\n                            <FormControlLabel control={<Switch checked={this.state.dark_theme} onChange={() => this.setState({ dark_theme: !this.state.dark_theme })} name=\"dark_theme\" />} label=\"Dark theme\" />\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => this.props.setSettings(this.state.ws_url, this.state.rateHz, this.state.dark_theme)} color=\"default\">\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nMainSettings.propTypes = {\n    show: propTypes.bool.isRequired,\n    ws_url: propTypes.string.isRequired,\n    rateHz: propTypes.number.isRequired,\n    dark_theme: propTypes.bool,\n    setSettings: propTypes.func.isRequired,\n};\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nexport const light_theme = createMuiTheme({\n  palette: {\n    type: \"light\",\n  },\n  typography: {\n    \"fontFamily\": `\"Roboto\", \"Helvetica\", \"Arial\", sans-serif`,\n    \"fontSize\": 14,\n    \"fontWeightLight\": 300,\n    \"fontWeightRegular\": 400,\n    \"fontWeightMedium\": 500\n  }\n});\n\nexport const dark_theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n  typography: {\n    \"fontFamily\": `\"Roboto\", \"Helvetica\", \"Arial\", sans-serif`,\n    \"fontSize\": 14,\n    \"fontWeightLight\": 300,\n    \"fontWeightRegular\": 400,\n    \"fontWeightMedium\": 500\n  },\n  overrides: {\n    MuiFormLabel: {\n      root: {\n        \"&$focused\": {\n          color: \"yellow\",\n        }\n      }\n    },\n  }\n});","import React, { Component } from \"react\";\nimport propTypes from \"prop-types\";\n\nimport GraphDashboard from \"./Graphs/GraphDashboard\";\nimport Joystick from \"./Joystick/Joystick\";\nimport OPEdit from \"./opEdit/OPEdit\";\nimport { TabPanel } from \"./TabPanel\";\nimport { WebSocketHelper } from \"./helpers/WebSocketHelper\";\nimport { MainSettings } from \"./MainSettings\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { AppBar, Toolbar, Tabs, Tab, Badge, Box, Snackbar, CssBaseline } from \"@material-ui/core\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport SignalWifi0BarIcon from \"@material-ui/icons/SignalWifi0Bar\";\nimport SignalWifi4BarIcon from \"@material-ui/icons/SignalWifi4Bar\";\nimport SignalWifiOffIcon from \"@material-ui/icons/SignalWifiOff\";\n\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { light_theme, dark_theme } from \"./theme/theme\";\n\nconst styles = {\n    iconSpaced: {\n        padding: \"0 40px 0 0\",\n    },\n    mainTabs: {\n        flexGrow: 1,\n    },\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        if (window.location.hostname !== \"localhost\") this.ws_url = `ws://${window.location.hostname}:8989`;\n        this.state = {\n            selectedTab: 1,\n            show_mainsettings: false,\n            ws_url: this.ws_url || \"ws://192.168.43.1:8989\",\n            rateHz: 20,\n            render_revision: 0,\n            dark_theme: false,\n        };\n        this.wshelper = React.createRef();\n        this.pushgraphdata = React.createRef();\n        this.pushopedit = React.createRef();\n    }\n\n    theme = light_theme;\n    ws_status = \"\";\n    sent_count = 0;\n    received_count = 0;\n    show_error = false;\n    last_error_msg = \"\";\n\n    componentDidMount() {\n        this.render_delay = setInterval(this.renderDelay, 1000 / this.state.rateHz);\n    }\n\n    shouldComponentUpdate(prevProps, prevState) {\n        return prevState.render_revision !== this.state.render_revision;\n    }\n\n    renderDelay = () => {\n        clearInterval(this.render_delay);\n        this.setState({ render_revision: this.state.render_revision + 1 });\n        this.render_delay = setInterval(this.renderDelay, 1000 / this.state.rateHz);\n    };\n\n    messageProcess = (msg_recv) => {\n        // Received messages must be pushed to child component for better performance\n        if (this.received_count > 9999) this.received_count = 0;\n        this.received_count += 1;\n        if (\"error\" in msg_recv) {\n            this.show_error = true;\n            this.last_error_msg = msg_recv.error;\n        } else if (\"opEdit\" in msg_recv) this.pushopedit.current.messageProcess(msg_recv);\n        else if (this.pushgraphdata.current) this.pushgraphdata.current.messageProcess(msg_recv);\n    };\n\n    sendWSmsg = (msg) => {\n        if (this.sent_count > 9999) this.sent_count = 0;\n        this.sent_count += 1;\n        this.wshelper.current.sendMessage(msg);\n    };\n\n    connectionStatus = () => {\n        if (this.ws_status === \"connected\")\n            return (\n                <>\n                    <Box className={this.props.classes.iconSpaced}>\n                        <Badge\n                            anchorOrigin={{\n                                vertical: \"top\",\n                                horizontal: \"right\",\n                            }}\n                            badgeContent={this.received_count}\n                            color=\"secondary\"\n                            showZero\n                            max={9999}\n                        >\n                            <ArrowDownwardIcon color=\"inherit\" />\n                        </Badge>\n                    </Box>\n                    <Box className={this.props.classes.iconSpaced}>\n                        <Badge\n                            anchorOrigin={{\n                                vertical: \"top\",\n                                horizontal: \"right\",\n                            }}\n                            badgeContent={this.sent_count}\n                            color=\"secondary\"\n                            showZero\n                            max={9999}\n                        >\n                            <ArrowUpwardIcon color=\"inherit\" />\n                        </Badge>\n                    </Box>\n                    <SignalWifi4BarIcon />\n                </>\n            );\n        else if (this.ws_status === \"connecting\") return <SignalWifi0BarIcon />;\n        else return <SignalWifiOffIcon />;\n    };\n\n    a11yProps = (index) => {\n        return {\n            id: `plugin-tab-${index}`,\n            \"aria-controls\": `plugin-tabpanel-${index}`,\n        };\n    };\n\n    setTheme = (set_dark_theme) => {\n        if (set_dark_theme !== this.state.dark_theme) {\n            this.setState({ dark_theme: set_dark_theme });\n            this.theme = set_dark_theme ? { ...dark_theme } : { ...light_theme };\n        }\n        return this.state.dark_theme ? dark_theme : light_theme;\n    };\n\n    render() {\n        //console.log(\"Rendering App\");\n        const { classes } = this.props;\n        return (\n            <>\n                <ThemeProvider theme={this.theme}>\n                    <CssBaseline />\n                    <WebSocketHelper ws_url={this.state.ws_url} messageProcess={this.messageProcess} ref={this.wshelper} status={(status) => (this.ws_status = status)} />\n                    <AppBar position=\"sticky\" color=\"default\">\n                        <Toolbar>\n                            <Tabs className={classes.mainTabs} value={this.state.selectedTab} onChange={(event, newValue) => this.setState({ selectedTab: newValue })} indicatorColor=\"secondary\" textColor=\"inherit\" variant=\"scrollable\" scrollButtons=\"auto\" aria-label=\"Plugins tabs\">\n                                <Tab label=\"Dashboard\" disabled {...this.a11yProps(0)} />\n                                <Tab label=\"Graphs\" {...this.a11yProps(1)} />\n                                <Tab label=\"Joystick\" {...this.a11yProps(2)} />\n                                <Tab label=\"OP Edit\" {...this.a11yProps(3)} />\n                                <Tab label=\"CAN BUS\" disabled {...this.a11yProps(4)} />\n                            </Tabs>\n\n                            {this.connectionStatus()}\n                            <IconButton\n                                onClick={() => {\n                                    this.setState({ show_mainsettings: true });\n                                }}\n                                aria-label=\"WebSocket connection status\"\n                                component=\"span\"\n                                color=\"inherit\"\n                            >\n                                <SettingsIcon />\n                            </IconButton>\n                        </Toolbar>\n                    </AppBar>\n\n                    <TabPanel value={this.state.selectedTab} index={0}>\n                        Dashboard will be here\n                    </TabPanel>\n                    <TabPanel value={this.state.selectedTab} index={1}>\n                        <GraphDashboard ref={this.pushgraphdata} active={this.state.selectedTab === 1} />\n                    </TabPanel>\n                    <TabPanel value={this.state.selectedTab} index={2}>\n                        <Joystick procData={(data) => this.sendWSmsg(data)} active={this.state.selectedTab === 2} />\n                    </TabPanel>\n                    <TabPanel value={this.state.selectedTab} index={3}>\n                        <OPEdit ref={this.pushopedit} procData={(data) => this.sendWSmsg(data)} active={this.state.selectedTab === 3} />\n                    </TabPanel>\n                    <TabPanel value={this.state.selectedTab} index={4}>\n                        CAN messages will be here\n                    </TabPanel>\n                    {this.state.show_mainsettings ? (\n                        <MainSettings\n                            setSettings={(ws_url, rate, dark_theme) => {\n                                this.setState({ show_mainsettings: false, ws_url: ws_url, rateHz: rate });\n                                this.setTheme(dark_theme);\n                            }}\n                            show={this.state.show_mainsettings}\n                            ws_url={this.state.ws_url}\n                            rateHz={this.state.rateHz}\n                            dark_theme={this.state.dark_theme}\n                        />\n                    ) : null}\n                    <Snackbar anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }} open={this.show_error} autoHideDuration={5000} onClose={() => (this.show_error = false)}>\n                        <MuiAlert elevation={6} variant=\"filled\" severity=\"error\">\n                            {this.last_error_msg}\n                        </MuiAlert>\n                    </Snackbar>\n                </ThemeProvider>\n            </>\n        );\n    }\n}\n\nApp.propTypes = {\n    classes: propTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}